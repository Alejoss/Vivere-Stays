{
	"info": {
		"_postman_id": "vivere-stays-api",
		"name": "Vivere Stays API",
		"description": "API collection for testing Vivere Stays endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data and access token\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('username');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('access_token');",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set(\"user_id\", response.id);",
									"    pm.environment.set(\"username\", response.username);",
									"    pm.environment.set(\"access_token\", response.access_token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"testuser@example.com\",\n    \"password\": \"testpass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/profiles/register/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"register",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data and access token\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('username');",
									"    pm.expect(response).to.have.property('access_token');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set(\"access_token\", response.access_token);",
									"    pm.environment.set(\"user_id\", response.id);",
									"    pm.environment.set(\"username\", response.username);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"testpass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/profiles/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has new access token\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set(\"access_token\", response.access_token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/api/profiles/refresh_token/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"refresh_token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has authentication status\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('is_authenticated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/profiles/check_auth/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"check_auth",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CSRF Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has CSRF token\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/profiles/get_csrf_token/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"get_csrf_token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has logout message\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.unset(\"access_token\");",
									"    pm.environment.unset(\"user_id\");",
									"    pm.environment.unset(\"username\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/api/profiles/logout/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"logout",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Get User Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has properties data\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('properties');",
									"    pm.expect(response).to.have.property('count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/profiles/properties/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"properties",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate Property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has association message\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"property_id\": \"{{property_id}}\",\n    \"action\": \"add\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/profiles/properties/associate/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles",
								"properties",
								"associate",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dynamic Pricing",
			"item": [
				{
					"name": "Create Property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has property data\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('property');",
									"    pm.expect(response.property).to.have.property('name');",
									"    pm.expect(response.property).to.have.property('id');",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set(\"property_id\", response.property.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Hotel\",\n    \"booking_hotel_url\": \"https://www.booking.com/hotel/test.html\",\n    \"street_address\": \"123 Test Street\",\n    \"city\": \"Test City\",\n    \"country\": \"Test Country\",\n    \"postal_code\": \"12345\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/dynamic-pricing/properties/create/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"dynamic-pricing",
								"properties",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List Properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has properties array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('properties');",
									"    pm.expect(response).to.have.property('count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/dynamic-pricing/properties/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"dynamic-pricing",
								"properties",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Property Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has property data\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('property');",
									"    pm.expect(response.property).to.have.property('id');",
									"    pm.expect(response.property).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/dynamic-pricing/properties/{{property_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"dynamic-pricing",
								"properties",
								"{{property_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Property updated successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('property');",
									"    pm.expect(response.property.state_province).to.eql('NY');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"state_province\": \"NY\",\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/dynamic-pricing/properties/{{property_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"dynamic-pricing",
								"properties",
								"{{property_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Property PMS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"PMS updated successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('property');",
									"    pm.expect(response).to.have.property('pms_change');",
									"    pm.expect(response.property.pms_name).to.eql('apaleo');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pms_name\": \"apaleo\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/dynamic-pricing/properties/{{property_id}}/pms/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"dynamic-pricing",
								"properties",
								"{{property_id}}",
								"pms",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Property deleted successfully\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/dynamic-pricing/properties/{{property_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"dynamic-pricing",
								"properties",
								"{{property_id}}",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Create Competitor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has competitor data\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('competitor');",
									"    pm.expect(response.competitor).to.have.property('name');",
									"    pm.expect(response.competitor).to.have.property('id');",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set(\"competitor_id\", response.competitor.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Competitor Hotel\",\n    \"url\": \"https://www.booking.com/hotel/competitor.html\",\n    \"property_id\": \"{{property_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/booking/competitors/create/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"booking",
								"competitors",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List Competitors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has competitors array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('competitors');",
									"    pm.expect(response).to.have.property('count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/booking/competitors/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"booking",
								"competitors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Competitor Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has competitor data\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('competitor');",
									"    pm.expect(response.competitor).to.have.property('id');",
									"    pm.expect(response.competitor).to.have.property('name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/booking/competitors/{{competitor_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"booking",
								"competitors",
								"{{competitor_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Property Competitors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has property competitors\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('competitors');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/booking/properties/{{property_id}}/competitors/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"booking",
								"properties",
								"{{property_id}}",
								"competitors",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-add Authorization header for authenticated requests",
					"if (pm.environment.get(\"access_token\")) {",
					"    pm.request.headers.add({",
					"        key: \"Authorization\",",
					"        value: \"Bearer \" + pm.environment.get(\"access_token\")",
					"    });",
					"}",
					"",
					"// Set default Content-Type for POST/PUT requests",
					"if (pm.request.method === \"POST\" || pm.request.method === \"PUT\") {",
					"    pm.request.headers.add({",
					"        key: \"Content-Type\",",
					"        value: \"application/json\"",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "username",
			"value": "",
			"type": "string"
		},
		{
			"key": "property_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "competitor_id",
			"value": "",
			"type": "string"
		}
	]
} 